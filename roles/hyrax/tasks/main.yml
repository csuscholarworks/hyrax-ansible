---
# Configure Hyrax

# Install required packages

- name: Install ImageMagick
  package:
    name: "{{ imagemagick_package }}"
    state: absent

- name: Install LibreOffice
  package:
    name: libreoffice
    state: present
  when: ansible_distribution != "Amazon"

- name: Install LibreOffice Amazon
  command: amazon-linux-extras install libreoffice -y
  args:
    creates: /usr/bin/libreoffice
  when: ansible_distribution == "Amazon"

- name: Install postgresql devel package
  package:
    name: "{{ postgresql_devel_package }}"
    state: present

- name: Install psycopg2 package
  package:
    name: "{{ python_psycopg2_package }}"
    state: present

- name: Install sqlite devel package
  package:
    name: "{{ sqlite_devel_package }}"
    state: present

- name: Install epel
  command: amazon-linux-extras install epel -y
  args:
    creates: /etc/yum.repos.d/epel.repo
  when: ansible_distribution == "Amazon"

- name: Enable EPEL repository
  yum:
    name: epel-release
    state: present
  when: ansible_distribution == "CentOS" or ansible_distribution == "Amazon"

- name: Install clamav devel package
  package:
    name: "{{ clamav_devel_package }}"
    state: present

- name: Install libxslt devel package
  package:
    name: "{{ libxslt_devel_package }}"
    state: present

- name: Install libxml2 devel package
  package:
    name: "{{ libxml2_devel_package }}"
    state: present

- name: Import a key from a url
  rpm_key:
    state: present
    key: https://rpms.remirepo.net/RPM-GPG-KEY-remi
  when: ansible_distribution == "CentOS" or ansible_distribution == "Amazon"

- name: Install Vips package
  package:
    name: http://rpms.remirepo.net/enterprise/remi-release-7.rpm
    state: present
  when: ansible_distribution == "CentOS" or ansible_distribution == "Amazon"

- name: Install Vips
  package:
    name: "{{ vips_package }}"
    state: present

# Hyrax groundwork

- name: Create the hyrax user
  user:
    name: hyrax
    system: yes
    home: /var/www/hyrax
    createhome: no
    shell: /bin/bash

- name: Create the puma user
  user:
    name: puma
    system: yes
    home: /var/www/hyrax
    createhome: no
    shell: /sbin/nologin

- name: Gem install bundler
  command: "/usr/local/bin/gem install bundler -v {{ bundler_version }}"
  args:
    creates: " /usr/local/lib/ruby/gems/{{ ruby_version_directory }}/gems/bundler-{{ bundler_version }}"

- name: Create the Hyrax parent directory
  file:
    path: /var/www/hyrax
    state: directory
    owner: hyrax
    group: puma
    mode: u=rwX,g=rwX,o=rX

- name: Create the shared directories
  file:
    path: "{{item}}"
    state: directory
    owner: hyrax
    group: puma
    mode: u=rwX,g=rwX,o=rX
  with_items:
    - /var/www/hyrax/shared/config/initializers
    - /var/www/hyrax/shared/log
    - /var/www/hyrax/shared/tmp
    - /var/www/hyrax/shared/public/system
    - /var/www/hyrax/shared/vendor/bundle

- name: Upload the env file
  template:
    src: dotenv
    dest: /var/www/hyrax/.env
    owner: hyrax
    group: puma
    mode: u=rx,g=rx

- name: Upload the profile file
  template:
    src: dotprofile
    dest: /var/www/hyrax/.profile
    owner: hyrax
    group: puma
    mode: u=rx,g=rx

- name: Upload the admpriv.pem
  template:
    src: ../../../admpriv.pem
    dest: /var/www/hyrax/shared/admpriv.pem
    owner: hyrax
    group: puma
    mode: u=rx,g=rx

- name: Create the Hyrax database
  postgresql_db:
    name: hyrax
    state: present
  become: yes
  become_user: postgres
  when: local_postgres

- name: Add Hyrax database user
  postgresql_user:
    db: hyrax
    name: hyrax
    password: "{{ hyrax_database_user_password }}"
    encrypted: yes
    priv: ALL
    state: present
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  when: local_postgres

- name: Get the location of the pg_hba.conf file
  command: psql -t -P format=unaligned -c 'show hba_file'
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  register: hba_file
  changed_when: false
  when: local_postgres

- name: Allow hyrax user to connect to postgresl using password auth
  blockinfile:
    path: "{{ hba_file.stdout }}"
    insertafter: "^# TYPE  DATABASE        USER            ADDRESS                 METHOD"
    marker: "# {mark} Ansible Managed - Allow hyrax user to connect using md5 auth"
    block: |
      host    hyrax           hyrax           127.0.0.1/32            md5
  notify: restart postgresql
  when: local_postgres

- name: Run handlers to restart postgresql if needed
  meta: flush_handlers

- name: Copy database.yml configuration
  template:
    src: database.yml
    dest: /var/www/hyrax/shared/config/database.yml
    owner: hyrax
    group: puma
    mode: u=r,g=r,o=

# Filesystem changes

- name: Ensure log file is created and writeable
  file:
    path: /var/www/hyrax/shared/log/production.log
    state: touch
    owner: hyrax
    group: puma
    mode: u=rw,g=rw,o=
  changed_when: False

- name: Copy puma.rb configuration file
  copy:
    src: puma.rb
    dest: /var/www/hyrax/shared/config/puma.rb
    owner: hyrax
    group: hyrax
    mode: a=r

- name: Copy mailer setting configuration file
  template:
    src: mail_initializer.rb
    dest: /var/www/hyrax/shared/config/initializers/mail.rb
    owner: hyrax
    group: hyrax
    mode: a=r
  when: local_mailer

- name: Let puma user write to tmp directory
  file:
    path: /var/www/hyrax/shared/tmp
    owner: hyrax
    group: puma
    mode: u=rwX,g=rwX,o=rX
    recurse: yes

- name: Copy sidekiq service file
  template:
    src: sidekiq.service
    dest: /etc/systemd/system/sidekiq.service
    owner: root
    group: root
    mode: a=r

- name: Copy puma service file
  template:
    src: puma.service
    dest: /etc/systemd/system/puma.service
    owner: root
    group: root
    mode: a=r

- name: Reload systemd daemons
  command: systemctl daemon-reload
  changed_when: False

# Deploy with Ansistrano
- name: Do a initial deploy
  include_role:
    name: ansistrano.deploy
    apply:
      become: yes
      become_user: hyrax

# Install and activate services
- name: Create solr core
  command: /opt/solr/bin/solr create_core -c blacklight-core -d /var/www/hyrax/current/solr/config/
  args:
    creates: /var/solr/data/blacklight-core/core.properties
  become: yes
  become_user: solr
  when: local_solr

# SELinux tweaking

- name: Install policycoreutils-python [CentOS]
  package:
    name: policycoreutils-python
    state: present
  when: ansible_distribution == "CentOS" or ansible_distribution == "Amazon"

- name: setsebool -P httpd_can_network_connect 1 [CentOS]
  command: setsebool -P httpd_can_network_connect 1
  changed_when: False
  when: ansible_distribution == "CentOS"

- name: setsebool httpd_can_network_connect 1 [CentOS]
  command: setsebool httpd_can_network_connect 1
  changed_when: False
  when: ansible_distribution == "CentOS"

- name: Run restorecon on public files
  command: restorecon -R /var/www/hyrax/current/public
  changed_when: False
  when: ansible_distribution == "CentOS" or ansible_distribution == "Amazon"

# Make the new Hyrax instance available using Nginx.

- name: Copy the hyrax nginx conf
  template:
    src: hyrax.conf
    dest: /etc/nginx/conf.d/hyrax.conf
    mode: a=r
    owner: root
    group: root
  notify: restart nginx

# Backups and fixity check

- name: Ensure the hyrax log directory exists.
  file:
    path: /var/log/hyrax
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rwX,o=

- name: Copy fixity check script
  template:
    src: hyrax_fixity_check.sh
    dest: /etc/cron.weekly/hyrax_fixity_check.sh
    owner: root
    group: root
    mode: u=rx,g=,o=

- name: Ensure the backups directory exists.
  file:
    path: "{{ hyrax_backups_directory }}"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rwX,o=rX

- name: Ensure the current backup directory exists.
  file:
    path: "{{ hyrax_backups_directory}}/current"
    state: directory
    owner: root
    group: root
    mode: u=rwX,g=rwX,o=rX

- name: Ensure the fcrepo backup directory exists.
  file:
    path: "{{ hyrax_backups_directory }}/current/fcrepo"
    state: directory
    owner: root
    group: "{{ tomcat_user }}"
    mode: u=rwX,g=rwX,o=
  when: local_fcrepo
- name: Ensure the postgres backup directory exists.
  file:
    path: "{{ hyrax_backups_directory }}/current/postgres"
    state: directory
    owner: root
    group: postgres
    mode: u=rwX,g=rwX,o=
  when: local_postgres

- name: Ensure the redis backup directory exists.
  file:
    path: "{{ hyrax_backups_directory }}/current/redis"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=
  when: local_redis

- name: Ensure the hyrax backup directory exists.
  file:
    path: "{{ hyrax_backups_directory }}/current/hyrax"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=

- name: Ensure the daily backup directory exists.
  file:
    path: "{{ hyrax_backups_directory}}/daily"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=

- name: Ensure the weekly backup directory exists.
  file:
    path: "{{ hyrax_backups_directory}}/weekly"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=

- name: Ensure the monthly backup directory exists.
  file:
    path: "{{ hyrax_backups_directory}}/monthly"
    state: directory
    owner: root
    group: root
    mode: u=rwX,go=

- name: Copy backup script to cron.daily
  template:
    src: hyrax_daily_backup.sh
    dest: /etc/cron.daily/hyrax_daily_backup.sh
    owner: root
    group: root
    mode: u=rx,go=

- name: Copy weekly backup script to cron.weekly
  template:
    src: hyrax_copy_weekly_backup.sh
    dest: /etc/cron.weekly/hyrax_copy_weekly_backup.sh
    owner: root
    group: root
    mode: u=rx,go=

- name: Copy monthly backup script to cron.monthly
  template:
    src: hyrax_copy_monthly_backup.sh
    dest: /etc/cron.monthly/hyrax_copy_monthly_backup.sh
    owner: root
    group: root
    mode: u=rx,go=

- name: Ensure logrotate is installed
  package:
    name: logrotate
    state: present

- name: Copy logrotate script to /etc/logrotate.d
  template:
    src: hyraxlogrotate
    dest: /etc/logrotate.d/hyrax
    owner: root
    group: root
    mode: u=rw,g=r,o=r

# - name: Configure initial collection types and workflows
#   command: "bash -l -c 'bundle exec rails hyrax:default_collection_types:create hyrax:default_admin_set:create hyrax:workflow:load'"
#   args:
#     chdir: "{{ ansistrano_deploy_to }}/current"
#   become: yes
#   become_user: hyrax
#   changed_when: False
